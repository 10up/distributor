<?php
/**
 * This class use to register script.
 *
 * This class handles:
 *   - Script dependencies.
 *     This uses asset information to set script dependencies,
 *     and version generated by @wordpress/dependency-extraction-webpack-plugin package.
 *   - Script localization.
 *     It also handles script translation registration.
 *
 * @unreleased x.x.x
 * @package    distributor
 */

namespace Distributor;

/**
 * Class EnqueueScript
 *
 * @unreleased x.x.x
 */
class EnqueueScript {
	/**
	 * Script ID.
	 *
	 * @unreleased x.x.x
	 */
	private string $script_id;

	/**
	 * Script path relative to plugin root directory.
	 *
	 * @unreleased x.x.x
	 */
	private string $relative_script_path;

	/**
	 * Script path absolute to plugin root directory.
	 *
	 * @unreleased x.x.x
	 */
	private string $absolute_script_path;

	/**
	 * Script dependencies.
	 *
	 * @unreleased x.x.x
	 */
	private array $script_dependencies = [];

	/**
	 * Script version.
	 *
	 * @unreleased x.x.x
	 */
	private string $version = '';

	/**
	 * Flag to decide whether load script in footer.
	 *
	 * @unreleased x.x.x
	 */
	private bool $load_script_in_footer = false;

	/**
	 * Flag to decide whether register script translation.
	 *
	 * @unreleased x.x.x
	 */
	private bool $register_translations = false;

	/**
	 * Script localization parameter name.
	 *
	 * @unreleased x.x.x
	 */
	private string $localize_script_param_name;

	/**
	 * Script localization parameter data.
	 *
	 * @unreleased x.x.x
	 */
	private array $localize_script_param_data;

	/**
	 * Plugin root directory path.
	 *
	 * @unreleased x.x.x
	 */
	private string $plugin_dir_path;

	/**
	 * Plugin root directory URL.
	 *
	 * @unreleased x.x.x
	 */
	private string $plugin_dir_url;

	/**
	 * Plugin text domain.
	 *
	 * @unreleased x.x.x
	 */
	private string $text_domain;

	/**
	 * EnqueueScript constructor.
	 *
	 * @unreleased x.x.x
	 *
	 * @param string $script_id   Script ID.
	 * @param string $script_name Script name.
	 */
	public function __construct( string $script_id, string $script_name ) {
		$this->plugin_dir_path      = DT_PLUGIN_PATH;
		$this->plugin_dir_url       = trailingslashit( plugin_dir_url( $this->plugin_dir_path ) );
		$this->text_domain          = 'distributor';
		$this->script_id            = $script_id;
		$this->relative_script_path = 'dist/js/' . $script_name . '.js';
		$this->absolute_script_path = $this->plugin_dir_path . $this->relative_script_path;
	}

	/**
	 * Set script version.
	 *
	 * @unreleased x.x.x
	 * @param string $version Script version.
	 */
	public function version( string $version ): EnqueueScript {
		$this->version = $version;

		return $this;
	}

	/**
	 * Flag to decide whether load script in footer.
	 *
	 * @unreleased x.x.x
	 */
	public function load_in_footer(): EnqueueScript {
		$this->load_script_in_footer = true;

		return $this;
	}

	/**
	 * Set script dependencies.
	 *
	 * @unreleased x.x.x
	 * @param array $script_dependencies Script dependencies.
	 */
	public function dependencies( array $script_dependencies ): EnqueueScript {
		$this->script_dependencies = $script_dependencies;

		return $this;
	}

	/**
	 * Register script.
	 *
	 * @unreleased x.x.x
	 */
	public function register(): EnqueueScript {
		$script_url   = $this->plugin_dir_url . $this->relative_script_path;
		$script_asset = $this->get_asset_file_data();

		wp_register_script(
			$this->script_id,
			$script_url,
			$script_asset['dependencies'],
			$script_asset['version'],
			$this->load_script_in_footer
		);

		if ( $this->register_translations ) {
			wp_set_script_translations(
				$this->script_id,
				$this->text_domain,
				$this->plugin_dir_path . 'languages'
			);
		}

		if ( $this->localize_script_param_data ) {
			wp_localize_script(
				$this->script_id,
				$this->localize_script_param_name,
				$this->localize_script_param_data
			);
		}

		return $this;
	}

	/**
	 * This function should be called after enqueue or register function.
	 *
	 * @unreleased x.x.x
	 */
	public function register_translations(): EnqueueScript {
		$this->register_translations = true;

		return $this;
	}

	/**
	 * This function should be called after enqueue or register function.
	 *
	 * @unreleased x.x.x
	 * @param string $js_variable_name JS variable name.
	 * @param array  $data             Data to be localized.
	 */
	public function register_localize_data( string $js_variable_name, array $data ): EnqueueScript {
		$this->localize_script_param_name = $js_variable_name;
		$this->localize_script_param_data = $data;

		return $this;
	}

	/**
	 * Enqueue script.
	 *
	 * @unreleased x.x.x
	 */
	public function enqueue(): EnqueueScript {
		if ( ! wp_script_is( $this->script_id, 'registered' ) ) {
			$this->register();
		}
		wp_enqueue_script( $this->script_id );

		return $this;
	}

	/**
	 * Should return script ID.
	 *
	 * @unreleased x.x.x
	 *
	 * @return string
	 */
	public function get_script_id(): string {
		return $this->script_id;
	}

	/**
	 * Get asset file data.
	 *
	 * @unreleased x.x.x
	 *
	 * @return array
	 */
	public function get_asset_file_data(): array {
		$script_asset_path = trailingslashit( dirname( $this->absolute_script_path ) )
			. basename( $this->absolute_script_path, '.js' )
			. '.asset.php';

		$script_asset = file_exists( $script_asset_path )
			? require $script_asset_path
			: [
				'dependencies' => [],
				'version'      => $this->version ?: filemtime( $this->absolute_script_path ), // phpcs:ignore
			];

		if ( $this->script_dependencies ) {
			$script_asset['dependencies'] = array_merge( $this->script_dependencies, $script_asset['dependencies'] );
		}

		return $script_asset;
	}
}
